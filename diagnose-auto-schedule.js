// Diagnostic script for Auto-Schedule System
// This script helps identify issues with the nurse scheduling system

const BASE_URL = 'http://localhost:6040/api';

// Helper function for API calls
async function callAPI(endpoint, method = 'GET', data = null) {
  try {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    const response = await fetch(`${BASE_URL}${endpoint}`, options);
    const result = await response.json();

    if (!response.ok) {
      throw new Error(`API Error: ${result.error || response.statusText}`);
    }

    return result;
  } catch (error) {
    console.error(`Error calling ${endpoint}:`, error);
    throw error;
  }
}

// 1. Check database connectivity and basic data
async function checkDatabaseHealth() {
  console.log('=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===');
  
  try {
    // Check if we can connect to the database
    const users = await callAPI('/user');
    console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${users.length} ‡∏Ñ‡∏ô`);
    
    const activeUsers = users.filter(u => u.isActive);
    console.log(`‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà: ${activeUsers.length} ‡∏Ñ‡∏ô`);
    
    // Check special staff
    const chiefs = users.filter(u => u.isChief);
    const pregnant = users.filter(u => u.isPregnant);
    const elderly = users.filter(u => u.isElderly);
    
    console.log(`‚úÖ ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ (HD): ${chiefs.length} ‡∏Ñ‡∏ô`);
    console.log(`‚úÖ ‡∏Ñ‡∏ô‡∏ó‡πâ‡∏≠‡∏á (PG): ${pregnant.length} ‡∏Ñ‡∏ô`);
    console.log(`‚úÖ ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ (SR): ${elderly.length} ‡∏Ñ‡∏ô`);
    
    return { users, activeUsers, chiefs, pregnant, elderly };
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

// 2. Check shifts availability
async function checkShifts() {
  console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ===');
  
  try {
    const shifts = await callAPI('/shif');
    console.log(`‚úÖ ‡∏û‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${shifts.length} ‡πÄ‡∏ß‡∏£`);
    
    // Check for required shifts
    const requiredShifts = ['M', 'A', 'N', 'MA', 'NA', 'OC', 'OFF'];
    const foundShifts = [];
    
    shifts.forEach(shift => {
      console.log(`  - ${shift.name} (ID: ${shift.id.slice(-6)}) - isShif: ${shift.isShif}`);
      if (requiredShifts.includes(shift.name)) {
        foundShifts.push(shift.name);
      }
    });
    
    const missingShifts = requiredShifts.filter(s => !foundShifts.includes(s));
    if (missingShifts.length > 0) {
      console.log(`‚ùå ‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ${missingShifts.join(', ')}`);
    } else {
      console.log('‚úÖ ‡∏û‡∏ö‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    }
    
    return { shifts, foundShifts, missingShifts };
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

// 3. Check locations
async function checkLocations() {
  console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ===');
  
  try {
    const locations = await callAPI('/location');
    console.log(`‚úÖ ‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${locations.length} ‡πÅ‡∏´‡πà‡∏á`);
    
    locations.forEach(location => {
      console.log(`  - ${location.name} (ID: ${location.id.slice(-6)})`);
    });
    
    return locations;
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

// 4. Check shift preferences
async function checkShiftPreferences(month = 0, year = 2025) {
  console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏£ ===');
  
  try {
    const preferences = await callAPI(`/shift-preference?month=${month}&year=${year}`);
    console.log(`‚úÖ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏£: ${preferences.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    if (preferences.length > 0) {
      const reserved = preferences.filter(p => p.isReserved);
      const preferences_only = preferences.filter(p => !p.isReserved);
      
      console.log(`  - ‡∏à‡∏≠‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô: ${reserved.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`  - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö: ${preferences_only.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    }
    
    return preferences;
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏£‡πÑ‡∏î‡πâ:', error);
    return [];
  }
}

// 5. Test auto-schedule generation
async function testAutoScheduleGeneration(month = 0, year = 2025, locationId = null) {
  console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ===');
  
  try {
    const requestData = {
      month: month,
      year: year,
      locationId: locationId,
      weeks: 4
    };
    
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠:', requestData);
    
    const result = await callAPI('/auto-schedule', 'POST', requestData);
    
    console.log('üì• ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
    console.log(`  - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${result.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
    console.log(`  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ${result.schedule?.length || 0}`);
    console.log(`  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.violations?.length || 0}`);
    
    if (result.summary) {
      console.log(`  - ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${result.summary.totalStaff}`);
      console.log(`  - ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${result.summary.specialStaff}`);
      console.log(`  - ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ${result.summary.normalStaff}`);
      console.log(`  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: ${result.summary.totalDays}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    return null;
  }
}

// 6. Check configuration
async function checkConfiguration(locationId = null) {
  console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===');
  
  try {
    const config = await callAPI(`/auto-schedule/config?locationId=${locationId || 'default'}`);
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏ö:', config.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    
    if (config.config) {
      console.log(`  - ‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${Object.keys(config.config.shiftWeights || {}).length} ‡πÄ‡∏ß‡∏£`);
      console.log(`  - ‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${Object.keys(config.config.shiftRules || {}).length} ‡∏Å‡∏é`);
      console.log(`  - ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${config.config.specialStaff?.roles?.join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    }
    
    return config;
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

// 7. Create sample data for testing
async function createSampleData() {
  console.log('\n=== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ===');
  
  try {
    // Check if we need to create sample shifts
    const shifts = await callAPI('/shif');
    const requiredShifts = ['M', 'A', 'N', 'MA', 'NA', 'OC', 'OFF'];
    const existingShiftNames = shifts.map(s => s.name);
    const missingShifts = requiredShifts.filter(s => !existingShiftNames.includes(s));
    
    if (missingShifts.length > 0) {
      console.log(`‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏£: ${missingShifts.join(', ')}`);
      console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    } else {
      console.log('‚úÖ ‡πÄ‡∏ß‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // Check if we need sample users
    const users = await callAPI('/user');
    if (users.length === 0) {
      console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    } else {
      console.log('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    return { missingShifts, hasUsers: users.length > 0 };
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

// 8. Run comprehensive diagnosis
async function runDiagnosis() {
  console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n');
  
  const results = {};
  
  // Step 1: Database health
  results.dbHealth = await checkDatabaseHealth();
  
  // Step 2: Shifts
  results.shifts = await checkShifts();
  
  // Step 3: Locations
  results.locations = await checkLocations();
  
  // Step 4: Configuration
  results.config = await checkConfiguration();
  
  // Step 5: Sample data
  results.sampleData = await createSampleData();
  
  // Step 6: Shift preferences
  results.preferences = await checkShiftPreferences();
  
  // Step 7: Test generation (only if we have basic data)
  if (results.dbHealth && results.shifts && results.shifts.shifts.length > 0) {
    results.generation = await testAutoScheduleGeneration();
  }
  
  // Summary
  console.log('\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ ===');
  
  const issues = [];
  const recommendations = [];
  
  if (!results.dbHealth) {
    issues.push('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    recommendations.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ DATABASE_URL');
  }
  
  if (!results.shifts || results.shifts.missingShifts.length > 0) {
    issues.push('‚ùå ‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    recommendations.push('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ' + results.shifts?.missingShifts?.join(', '));
  }
  
  if (!results.dbHealth?.activeUsers || results.dbHealth.activeUsers.length === 0) {
    issues.push('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
    recommendations.push('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isActive = true');
  }
  
  if (!results.generation || results.generation.schedule?.length === 0) {
    issues.push('‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    recommendations.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô');
  }
  
  if (issues.length === 0) {
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
  } else {
    console.log('‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
    issues.forEach(issue => console.log(issue));
    
    console.log('\n‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
    recommendations.forEach(rec => console.log(rec));
  }
  
  return results;
}

// Export functions for use in browser console
if (typeof window !== 'undefined') {
  window.diagnoseAutoSchedule = {
    runDiagnosis,
    checkDatabaseHealth,
    checkShifts,
    checkLocations,
    checkShiftPreferences,
    testAutoScheduleGeneration,
    checkConfiguration,
    createSampleData
  };
  
  console.log('üîß Diagnostic functions loaded. Use window.diagnoseAutoSchedule.runDiagnosis() to start diagnosis.');
}

// Run diagnosis if this script is executed directly
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    runDiagnosis,
    checkDatabaseHealth,
    checkShifts,
    checkLocations,
    checkShiftPreferences,
    testAutoScheduleGeneration,
    checkConfiguration,
    createSampleData
  };
} 